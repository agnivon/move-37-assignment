// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id          String      @id @default(uuid()) @db.Uuid
  filename    String
  filePath    String
  duration    Float
  size        Int
  contentType String
  status      VideoStatus
  trims       Trim[]
  subtitles   Subtitle[]
  renders     Render[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Trim {
  id             String   @id @default(uuid()) @db.Uuid
  startTime      Float
  endTime        Float
  videoId        String   @db.Uuid
  trimmedVideoId String   @db.Uuid
  video          Video    @relation(fields: [videoId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Subtitle {
  id        String   @id @default(uuid()) @db.Uuid
  text      String
  startTime Float
  endTime   Float
  videoId   String   @db.Uuid
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Render {
  id              String       @id @default(uuid()) @db.Uuid
  status          RenderStatus
  outputPath      String?
  videoId         String       @db.Uuid
  renderedVideoId String?      @db.Uuid
  video           Video        @relation(fields: [videoId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum VideoStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}

enum RenderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
